#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from snp_msgs.srv import GenerateScanMotionPlan
from trajectory_msgs.msg import JointTrajectoryPoint
import yaml
from builtin_interfaces.msg import Duration, Time


class ScanMotionPlanFromFileNode(Node):

    def __init__(self):
        super().__init__('scan_motion_plan_from_file')
        self.srv = self.create_service(GenerateScanMotionPlan, 'generate_scan_motion_plan', self.callback)
        self.declare_parameter('scan_trajectory_file', rclpy.Parameter.Type.STRING)

    def callback(self, request, response):
        try:
            with open(self.get_parameter('scan_trajectory_file').value, "r") as file_input:
                scan_traj = yaml.safe_load(file_input)

            response.motion_plan.header.stamp = Time(sec=int(scan_traj['header']['stamp']['sec']),nanosec=int(scan_traj['header']['stamp']['nanosec']))
            response.motion_plan.header.frame_id = scan_traj['header']['frame_id']
            response.motion_plan.joint_names = scan_traj['joint_names']
            for point_val in scan_traj['points']:
                point = JointTrajectoryPoint()
                point.positions = point_val['positions']
                point.velocities = point_val['velocities']
                point.accelerations = point_val['accelerations']
                point.effort = point_val['effort']
                point.time_from_start = Duration(sec = int(point_val['time_from_start']['sec']),
                                                 nanosec= int(point_val['time_from_start']['nanosec']))
                response.motion_plan.points.append(point)

            response.success = True

        except Exception as e:
            response.success = False
            response.message = str(e)

        return response


def main(args=None):
    rclpy.init(args=args)
    rclpy.spin(ScanMotionPlanFromFileNode())
    rclpy.shutdown()


if __name__ == '__main__':
    main()
